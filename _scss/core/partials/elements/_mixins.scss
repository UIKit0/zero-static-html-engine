// # Mixins

// ## Font Size
// Computes a custom line-height for a given size, unless bool set to false.

@mixin font-size($font-size, $line-height-bool: true) {
  font-size: $font-size;
  @if $line-height-bool == true {
    line-height: ceil($font-size / map-get($line-height, base)) * map-get($line-height, base) / $font-size;
  }
}

// ## Font Smoothing
// Better rendering of fonts on OS X. Does not affect IE.

@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// ## Dead Center
// Centers an element using relative or absolute positioning.

//[c]
//      @include flex-center;
//[/c]

@mixin flex-center {
  @extend %flex;
  @extend %justify-content--center;
  @extend %align-items--center;
}

// ## CSS Arrows

// This mixin creates a CSS arrow on a given element. We can have the arrow
// appear in one of 12 locations, 3 positions for each side.
//
// You pass this position in along with a desired arrow color and optional
// border color, for example:
//
//[c]
//      @include arrow(top, left, red)
//[/c]
//
// for just a single, red arrow, or:
//
//[c]
//      @include arrow(bottom, center, red, black)
//[/c]
//
// which will create a red triangle with a black border which sits at the bottom
// center of the element. Call the mixin this way:
//
//     .foo {
//         @include arrow(top, left, #BADA55, #ACE);
//         background-color: #BADA55;
//         border: 1px solid #ACE;
//     }

@mixin arrow($arrow-edge, $arrow-location, $arrow-color, $border-color: $arrow-color) {
  @if $arrow-edge == top {
    @extend %arrow--top;

    &:before {
      border-bottom-color: $border-color!important;
    }

    &:after {
      border-bottom-color: $arrow-color!important;
    }

    @if $arrow-location == left {
      @extend %arrow--left;
    }

    @if $arrow-location == center {
      @extend %arrow--center;
    }

    @if $arrow-location == right {
      @extend %arrow--right;
    }
  }

  @if $arrow-edge == right {
    @extend %arrow--far;

    &:before {
      border-left-color: $border-color!important;
    }

    &:after {
      border-left-color: $arrow-color!important;
    }

    @if $arrow-location == top {
      @extend %arrow--upper;
    }

    @if $arrow-location == center {
      @extend %arrow--middle;
    }

    @if $arrow-location == bottom {
      @extend %arrow--lower;
    }
  }

  @if $arrow-edge == bottom {
    @extend %arrow--bottom;

    &:before {
      border-top-color: $border-color!important;
    }

    &:after {
      border-top-color: $arrow-color!important;
    }

    @if $arrow-location == left {
      @extend %arrow--left;
    }

    @if $arrow-location == center {
      @extend %arrow--center;
    }

    @if $arrow-location == right {
      @extend %arrow--right;
    }
  }

  @if $arrow-edge == left {
    @extend %arrow--near;

    &:before {
      border-right-color: $border-color!important;
    }

    &:after {
      border-right-color: $arrow-color!important;
    }

    @if $arrow-location == top {
      @extend %arrow--upper;
    }

    @if $arrow-location == center {
      @extend %arrow--middle;
    }

    @if $arrow-location == bottom {
      @extend %arrow--lower;
    }
  }
}


// ## Keyframes mixin
// $name = Name of animation to be referenced later in "animation:" property.
//
//    [c]
//     @include keyframes(fadeIn) {
//         0% { opacity: 0; }
//         100% { opacity: 1; }
//     }
//    [/c]

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}
