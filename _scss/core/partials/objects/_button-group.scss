// # Button Group
// For buttons that are flush against each other. Also possible to include an text input.

// ## Example

// ### Button Group
//[hc]
//     <div class="lego-button-group">
//       <button class="lego-button">Go</button>
//       <button class="lego-button">Go</button>
//       <button class="lego-button">Go</button>
//     </div>
//[/hc]

// ### Button Group with Active
//[hc]
//     <div class="lego-button-group">
//       <button class="lego-button">Go</button>
//       <button class="lego-button lego-button--brand">Go</button>
//       <button class="lego-button">Go</button>
//     </div>
//[/hc]

// ### Button Group with Text Input
//[hc]
//     <div class="lego-button-group">
//       <button class="lego-button">Select <span class="lego-arrow-inline--down"></span></button>
//       <input type="text" class="lego-text-input">
//     </div>
//[/hc]

// ### Button Group with Text Input
//[hc]
//     <div class="lego-button-group">
//       <input type="text" class="lego-text-input">
//       <button class="lego-button">Go</button>
//     </div>
//[/hc]

%lego-button-group,
.lego-button-group {
  @extend %flex;

  > * {
    margin-left: 0;
    border-radius: 0;

    &:not(:first-child) {
      margin-left: -1px;
    }

    &:hover,
    &:focus {
      position: relative;
    }

    &:first-child {
      border-radius: map-get($border-radius, base) 0 0 map-get($border-radius, base);
    }

    &:last-child {
      border-radius: 0 map-get($border-radius, base) map-get($border-radius, base) 0;
    }
  }

  > .lego-button--brand {
    position: relative;
  }

  > .lego-text-input {
    @extend %flex-1;
    width: auto;
  }

  // If inside a button group bring the colored buttons to the top so that the borders are intact.

  .lego-button--highlight,
  .lego-button--danger,
  .lego-button--brand {
    z-index: 1;
  }
}
